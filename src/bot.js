const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
require('dotenv').config();

const app = express();
app.use(express.json());

if (!process.env.BOT_TOKEN || !process.env.WEBAPP_URL) {
  console.error('Missing required environment variables!');
  console.error('Please check that BOT_TOKEN and WEBAPP_URL are set in your .env file');
  process.exit(1);
}

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const userSessions = new Map();

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  console.log(`üì± New user started bot: ${userName} (ID: ${userId})`);

  userSessions.set(userId, {
    startTime: new Date(),
    currentStep: 'choosing_type',
    chatId: chatId
  });


  const welcomeText = `
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä, ${userName}!

–¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä ‚Äî —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–Ω–Ω–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∞—Å–ø–∏—Ä–∞–Ω—Ç–æ–≤ –≤–µ–¥—É—â–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≤—É–∑–æ–≤ –≤ R&D-–ø—Ä–æ—Ü–µ—Å—Å—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –ú–æ—Å–∫–≤—ã.

–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:
  `;


  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üè¢ –ö–æ–º–ø–∞–Ω–∏—è',
          callback_data: 'user_type_company'
        }
      ],
      [
        {
          text: 'üéì –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
          callback_data: 'user_type_participant'
        }
      ]
    ]
  };

  console.log('üìã Created keyboard:', JSON.stringify(keyboard, null, 2));

  try {
    await bot.sendMessage(chatId, welcomeText, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });
    console.log('‚úÖ Welcome message sent successfully');
  } catch (error) {
    console.error('‚ùå Error sending welcome message:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑.');
  }
});


bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  console.log(`üìû Callback query received: ${data} from user ${userId}`);

  await bot.answerCallbackQuery(query.id);

  try {
    if (data === 'user_type_company') {
      console.log('‚úÖ Processing company selection');
      await handleCompanySelection(chatId, userId, query.message.message_id);
    } else if (data === 'user_type_participant') {
      console.log('‚úÖ Processing participant selection');
      await handleParticipantSelection(chatId, userId, query.message.message_id);
    } else if (data === 'back_to_start') {
      console.log('‚úÖ Processing back to start');

      const fakeStartMessage = {
        chat: { id: query.message.chat.id },
        from: query.from,
        text: '/start'
      };

      try {
        await bot.deleteMessage(query.message.chat.id, query.message.message_id);
      } catch (error) {
        console.warn('Could not delete message:', error.message);
      }

      bot.emit('text', fakeStartMessage);
    } else {
      console.warn(`‚ö†Ô∏è Unknown callback data: ${data}`);
    }
  } catch (error) {
    console.error('‚ùå Error handling callback query:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑.');
  }
});

async function handleCompanySelection(chatId, userId, messageId) {
  console.log(`üè¢ User ${userId} selected company registration`);

  const session = userSessions.get(userId);
  if (session) {
    session.userType = 'company';
    session.currentStep = 'company_registration';
  }

  const updatedText = `
‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: –ö–æ–º–ø–∞–Ω–∏—è

–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 5-10 –º–∏–Ω—É—Ç.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:
  `;

  const webAppKeyboard = {
    inline_keyboard: [
      [
        {
          text: 'üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∫–æ–º–ø–∞–Ω–∏–∏',
          web_app: {
            url: process.env.WEBAPP_URL
          }
        }
      ],
      [
        {
          text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É',
          callback_data: 'back_to_start'
        }
      ]
    ]
  };

  try {
    await bot.editMessageText(updatedText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: webAppKeyboard,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.warn('Could not edit message, sending new one:', error.message);
    await bot.sendMessage(chatId, updatedText, {
      reply_markup: webAppKeyboard,
      parse_mode: 'HTML'
    });
  }
}

// TODO
async function handleParticipantSelection(chatId, userId, messageId) {
  console.log(`üéì User ${userId} selected participant registration`);

  const session = userSessions.get(userId);
  if (session) {
    session.userType = 'participant';
    session.currentStep = 'participant_not_ready';
  }

  const notReadyText = `
üéì –í—ã –≤—ã–±—Ä–∞–ª–∏: –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–æ—Ä–º–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. üîß

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–ø—Ä—è–º—É—é.
  `;

  const backKeyboard = {
    inline_keyboard: [
      [
        {
          text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É',
          callback_data: 'back_to_start'
        }
      ]
    ]
  };

  try {
    await bot.editMessageText(notReadyText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: backKeyboard,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.warn('Could not edit message, sending new one:', error.message);
    await bot.sendMessage(chatId, notReadyText, {
      reply_markup: backKeyboard,
      parse_mode: 'HTML'
    });
  }
}

/*
bot.on('callback_query', async (query) => {
  if (query.data === 'back_to_start') {
    await bot.answerCallbackQuery(query.id);

    const fakeStartMessage = {
      chat: { id: query.message.chat.id },
      from: query.from,
      text: '/start'
    };

    try {
      await bot.deleteMessage(query.message.chat.id, query.message.message_id);
    } catch (error) {
      console.warn('Could not delete message:', error.message);
    }

    bot.emit('text', fakeStartMessage);
  }
});*/

bot.on('web_app_data', async (msg) => {
  console.log('üéØ RAW MESSAGE RECEIVED:', JSON.stringify(msg, null, 2));

  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const data = msg.web_app.data;

  console.log(`üìä Received Web App data from user ${userId}`);
  console.log(`üí¨ Chat ID: ${chatId}`);
  console.log(`üì± Data length: ${data.length} characters`);
  console.log(`üìã Raw data: ${data.substring(0, 100)}...`);
  try {
    const formData = JSON.parse(data);
    console.log('‚úÖ JSON parsed successfully');
    console.log('üè¢ Company name:', formData.companyName);

    const applicationId = `TH-${userId}-${Date.now()}`;

    const application = {
      id: applicationId,
      userId: userId,
      submittedAt: new Date().toISOString(),
      data: formData
    };

    console.log('üìã New company application:', JSON.stringify(application, null, 2));

    const confirmationText = `
üéâ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!

üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <code>${applicationId}</code>

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä! –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ email: <code>${formData.mentorEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>

–î–ª—è –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
    `;

    await bot.sendMessage(chatId, confirmationText, {
      parse_mode: 'HTML'
    });

    userSessions.delete(userId);

    await notifyAdministrators(application);

  } catch (error) {
    console.error('‚ùå JSON parse error:', error);
    console.error('üìã Problematic data:', data);
    await bot.sendMessage(chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
});
bot.on('message', (msg) => {
  console.log('üì® ANY MESSAGE:', {
    type: msg.chat.type,
    from: msg.from.first_name,
    text: msg.text?.substring(0, 50),
    hasWebAppData: !!msg.web_app
  });
});

async function notifyAdministrators(application) {
  const adminChatIds = [
    848907805,
  ];

  const adminNotification = `
üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏!

üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${application.data.companyName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üÜî ID –∑–∞—è–≤–∫–∏: <code>${application.id}</code>
üë§ –ú–µ–Ω—Ç–æ—Ä: ${application.data.mentorName || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: ${application.data.mentorEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: ${new Date(application.submittedAt).toLocaleString('ru-RU')}

#–Ω–æ–≤–∞—è_–∑–∞—è–≤–∫–∞ #–∫–æ–º–ø–∞–Ω–∏—è
  `;

  for (const adminChatId of adminChatIds) {
    try {
      await bot.sendMessage(adminChatId, adminNotification, {
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error(`Failed to notify admin ${adminChatId}:`, error.message);
    }
  }
}


bot.onText(/\/help/, async (msg) => {
  const helpText = `
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞—è–≤–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è–º –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
  `;

  await bot.sendMessage(msg.chat.id, helpText, {
    parse_mode: 'HTML'
  });
});

bot.onText(/\/status/, async (msg) => {
  const statusText = `
‚úÖ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω</b>

üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toLocaleString('ru-RU')}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${userSessions.size}
üåê Web App URL: ${process.env.WEBAPP_URL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
  `;

  await bot.sendMessage(msg.chat.id, statusText, {
    parse_mode: 'HTML'
  });
});

bot.on('polling_error', (error) => {
  console.error('‚ùå Polling error:', error);
});

bot.on('error', (error) => {
  console.error('‚ùå Bot error:', error);
});

process.on('SIGINT', () => {
  console.log('\nüõë Received SIGINT. Shutting down gracefully...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë Received SIGTERM. Shutting down gracefully...');
  bot.stopPolling();
  process.exit(0);
});

app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    activeSessions: userSessions.size
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Health check server running on port ${PORT}`);
});

console.log('ü§ñ Bot starting...');
console.log(`üîë Bot token: ${process.env.BOT_TOKEN ? '‚úÖ Configured' : '‚ùå Missing'}`);
console.log(`üåê Web App URL: ${process.env.WEBAPP_URL || '‚ùå Not configured'}`);
console.log('‚úÖ Bot is ready and listening for messages');