const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
require('dotenv').config();

const app = express();
app.use(express.json());

if (!process.env.BOT_TOKEN || !process.env.WEBAPP_URL) {
  console.error('Missing required environment variables!');
  console.error('Please check that BOT_TOKEN and WEBAPP_URL are set in your .env file');
  process.exit(1);
}

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

if (process.env.DEBUG) {
  bot.on('polling_error', (error) => console.log('Polling error:', error));
  bot.on('error', (error) => console.log('Bot error:', error));
}

const applications = new Map();
const adminSettings = {
  adminChatIds: [848907805],
  notificationsEnabled: true
};

async function handleStartCommand(msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  console.log(`üì± New user started bot: ${userName} (ID: ${userId})`);

  const welcomeText = `
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä, ${userName}!

–¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä ‚Äî —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–Ω–Ω–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∞—Å–ø–∏—Ä–∞–Ω—Ç–æ–≤ –≤–µ–¥—É—â–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≤—É–∑–æ–≤ –≤ R&D-–ø—Ä–æ—Ü–µ—Å—Å—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –ú–æ—Å–∫–≤—ã.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏:
  `;

  const webAppKeyboard = {
    keyboard: [
      [
        {
          text: 'üìã –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏',
          web_app: {
            url: process.env.WEBAPP_URL
          }
        }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };

  try {
    await bot.sendMessage(chatId, welcomeText, {
      reply_markup: webAppKeyboard,
      parse_mode: 'HTML'
    });
    console.log('‚úÖ Welcome message sent successfully');
  } catch (error) {
    console.error('‚ùå Error sending welcome message:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑.');
  }
}

bot.onText(/\/start/, handleStartCommand);

// admin 
bot.onText(/\/admin/, async (msg) => {
  const userId = msg.from.id;

  if (!adminSettings.adminChatIds.includes(userId)) {
    await bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    return;
  }

  const totalApplications = applications.size;
  const companyApps = Array.from(applications.values()).filter(app => app.type === 'company').length;
  const participantApps = Array.from(applications.values()).filter(app => app.type === 'participant').length;

  const last24h = Array.from(applications.values()).filter(app =>
    new Date() - new Date(app.submittedAt) < 24 * 60 * 60 * 1000
  ).length;

  const statsText = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫</b>

üìÅ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${totalApplications}
üè¢ –ó–∞—è–≤–æ–∫ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π: ${companyApps}
üéì –ó–∞—è–≤–æ–∫ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantApps}
‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${last24h}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫:</b>
${Array.from(applications.values())
      .slice(-10)
      .map(app => `‚Ä¢ ${app.type === 'company' ? 'üè¢' : 'üéì'} ${app.data.companyName || app.data.fio || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (${app.id})`)
      .join('\n')}
  `;

  await bot.sendMessage(msg.chat.id, statsText, { parse_mode: 'HTML' });
});

// Helper function to format resume link
function formatResumeLink(link) {
  if (!link) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

  // Make sure link has protocol
  if (!link.startsWith('http://') && !link.startsWith('https://')) {
    link = 'https://' + link;
  }

  return link;
}

bot.on('message', async (msg) => {
  if (msg.web_app_data) {
    console.log('üéØ WEB APP DATA DETECTED!');

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const data = msg.web_app_data.data;

    try {
      const formData = JSON.parse(data);
      console.log('‚úÖ JSON parsed successfully');

      const applicationId = `TH-${userId}-${Date.now()}`;
      const applicationType = formData.applicationType || 'unknown';

      const application = {
        id: applicationId,
        userId: userId,
        type: applicationType,
        submittedAt: new Date().toISOString(),
        data: formData
      };

      applications.set(applicationId, application);

      let confirmationText;

      if (applicationType === 'company') {
        confirmationText = `
üéâ –ó–∞—è–≤–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!

üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <code>${applicationId}</code>

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä! –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ email: <code>${formData.mentorEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>
        `;
      } else if (applicationType === 'participant') {
        confirmationText = `
üéì –ó–∞—è–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!

üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <code>${applicationId}</code>

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π.

–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ email: <code>${formData.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>

–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏-–ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ:
https://i.moscow/lomonosov_resident
        `;
      }

      await bot.sendMessage(chatId, confirmationText + '\n\n–î–ª—è –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', {
        parse_mode: 'HTML'
      });

      if (adminSettings.notificationsEnabled) {
        await sendFullApplicationToAdmins(application);
      }

    } catch (error) {
      console.error('‚ùå Error processing application:', error);
      await bot.sendMessage(chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  }
});

async function sendFullApplicationToAdmins(application) {
  const emoji = application.type === 'company' ? 'üè¢' : 'üéì';
  const type = application.type === 'company' ? '–ö–æ–º–ø–∞–Ω–∏—è' : '–£—á–∞—Å—Ç–Ω–∏–∫';

  let fullApplicationText = `
üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê ${type.toUpperCase()}</b>

${emoji} <b>–¢–∏–ø:</b> ${type}
üÜî <b>ID:</b> <code>${application.id}</code>
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(application.submittedAt).toLocaleString('ru-RU')}

`;

  if (application.type === 'company') {
    fullApplicationText += `
<b>- –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ü–ê–ù–ò–ò</b>
üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${application.data.companyName}
üìä <b>–ò–ù–ù:</b> ${application.data.inn}
üü¢ <b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</b> ${application.data.readiness}

<b>- –ö–û–ù–¢–ê–ö–¢–´ –ú–ï–ù–¢–û–†–ê</b>
üë§ <b>–§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> ${application.data.mentorName}
üìß <b>Email:</b> ${application.data.mentorEmail}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${application.data.mentorPhone}
üí¨ <b>Telegram:</b> ${application.data.mentorTelegram}

<b>- –î–ï–¢–ê–õ–ò –°–¢–ê–ñ–ò–†–û–í–ö–ò</b>
üèõÔ∏è <b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> ${application.data.department}
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> ${application.data.participantsCount}
üîß <b>–†–µ—Å—É—Ä—Å—ã:</b> ${application.data.resources || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üéØ <b>–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏:</b> ${application.data.shortTermGoals || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

<b>- –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ò –£–°–õ–û–í–ò–Ø</b>
üíº <b>–ù–∞–≤—ã–∫–∏:</b> ${application.data.skillRequirements || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìã <b>–î—Ä—É–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> ${application.data.otherRequirements || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üè† <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> ${application.data.workMode}
‚è±Ô∏è <b>–ì—Ä–∞—Ñ–∏–∫:</b> ${application.data.workSchedule}
üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> ${application.data.paymentAbility}
üöÄ <b>–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${application.data.employmentProspects || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí≠ <b>–ü—Ä–æ—á–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b> ${application.data.otherWishes || '–ù–µ—Ç'}
`;
  } else if (application.type === 'participant') {
    fullApplicationText += `
<b>- –õ–ò–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>
üë§ <b>–§–ò–û:</b> ${application.data.fio}
üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${application.data.age}
üè† <b>–ü—Ä–æ–∂–∏–≤–∞–µ—Ç –≤ –ú–æ—Å–∫–≤–µ:</b> ${application.data.livesInMoscow === true ? '–î–∞' : application.data.livesInMoscow === false ? '–ù–µ—Ç' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

<b>- –ö–û–ù–¢–ê–ö–¢–´</b>
üìß <b>Email:</b> ${application.data.email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${application.data.phone}
üí¨ <b>Telegram:</b> ${application.data.telegram}
üìÑ <b>–†–µ–∑—é–º–µ:</b> ${formatResumeLink(application.data.resumeLink)}

<b>- –û–ë–†–ê–ó–û–í–ê–ù–ò–ï</b>
üéì <b>–í–£–ó:</b> ${application.data.university}
üìö <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> ${application.data.direction}
üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${application.data.educationLevel}
üìñ <b>–°—Ç–∞—Ç—É—Å:</b> ${application.data.status}
${application.data.course ? `üìã <b>–ö—É—Ä—Å:</b> ${application.data.course}` : ''}

<b>- –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ü–û –†–ê–ë–û–¢–ï</b>
üè† <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> ${application.data.workMode}
‚è±Ô∏è <b>–ì—Ä–∞—Ñ–∏–∫:</b> ${application.data.workSchedule}
${application.data.customHours ? `‚è∞ <b>–ß–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é:</b> ${application.data.customHours}` : ''}
üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> ${application.data.paymentPossibility}
`;
  }

  fullApplicationText += `
<b>‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</b>
#–Ω–æ–≤–∞—è_–∑–∞—è–≤–∫–∞ #${application.type}
  `;

  for (const adminChatId of adminSettings.adminChatIds) {
    try {
      await bot.sendMessage(adminChatId, fullApplicationText, {
        parse_mode: 'HTML'
      });

      console.log(`‚úÖ Full application sent to admin ${adminChatId}`);
    } catch (error) {
      console.error(`‚ùå Failed to notify admin ${adminChatId}:`, error.message);
    }
  }
}

bot.onText(/\/help/, async (msg) => {
  const helpText = `
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –¢–µ—Ö–Ω–æ—Ö–∞–Ω—Ç–µ—Ä</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è–º –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @astafeva_alisiia
  `;

  await bot.sendMessage(msg.chat.id, helpText, {
    parse_mode: 'HTML'
  });
});

bot.onText(/\/status/, async (msg) => {
  const statusText = `
‚úÖ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω</b>

üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toLocaleString('ru-RU')}
üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${applications.size}
üåê Web App URL: ${process.env.WEBAPP_URL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
  `;

  await bot.sendMessage(msg.chat.id, statusText, {
    parse_mode: 'HTML'
  });
});

bot.on('polling_error', (error) => {
  console.error('‚ùå Polling error:', error);
});

bot.on('error', (error) => {
  console.error('‚ùå Bot error:', error);
});

process.on('SIGINT', () => {
  console.log('\nüõë Received SIGINT. Shutting down gracefully...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë Received SIGTERM. Shutting down gracefully...');
  bot.stopPolling();
  process.exit(0);
});

app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    totalApplications: applications.size
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Health check server running on port ${PORT}`);
});

console.log('ü§ñ Bot starting...');
console.log(`üîë Bot token: ${process.env.BOT_TOKEN ? '‚úÖ Configured' : '‚ùå Missing'}`);
console.log(`üåê Web App URL: ${process.env.WEBAPP_URL || '‚ùå Not configured'}`);

bot.deleteWebHook().then(() => {
  console.log('‚úÖ Webhooks cleared, using polling mode');
  console.log('‚úÖ Bot is ready and listening for messages');
}).catch(err => {
  console.error('‚ùå Error clearing webhooks:', err);
});